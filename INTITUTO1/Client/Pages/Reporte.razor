@inject IJSRuntime JS
@page "/ReporteNotas"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<h3>Generar Certificado</h3>

<EditForm Model="@certificado" OnValidSubmit="@GenerarCertificado">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Nombre del Administrador:</label>
        <InputText @bind-Value="certificado.NombreAdministrador" />
    </div>
    <div>
        <label>Nombre del Alumno:</label>
        <InputText @bind-Value="certificado.NombreAlumno" />
    </div>
    <div>
        <label>DNI del Alumno:</label>
        <InputNumber @bind-Value="certificado.DniAlumno" />
    </div>
    <div>
        <label>Carrera:</label>
        <InputText @bind-Value="certificado.Carrera" />
    </div>
    <div>
        <label>Interesado:</label>
        <InputText @bind-Value="certificado.Interesado" />
    </div>
    <div>
        <label>Día:</label>
        <InputNumber @bind-Value="certificado.DiaNumero" />
    </div>
    <div>
        <label>Mes:</label>
        <InputText @bind-Value="certificado.Mes" />
    </div>
    <div>
        <label>Año:</label>
        <InputNumber @bind-Value="certificado.Anio" />
    </div>

    <button type="submit">Generar PDF</button>
</EditForm>

@if (pdfBytes != null)
{
    <h4>Certificado generado:</h4>
    <a href="@pdfUrl" target="_blank">Descargar Certificado</a>
}



@code {

    private INTITUTO1.Shared.DTO.CertificadoExamenDTO certificado = new INTITUTO1.Shared.DTO.CertificadoExamenDTO();
    private byte[] pdfBytes;
    private string pdfUrl;

    private async Task GenerarCertificado()
    {
        var response = await Http.PostAsJsonAsync("api/CrearCertificadoEx", certificado);
        response.EnsureSuccessStatusCode();
        pdfBytes = await response.Content.ReadAsByteArrayAsync();
        pdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";
    }
}





