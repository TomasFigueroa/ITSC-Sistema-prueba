@page "/DivisionCicloMateriaAlumnos"
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore

@inject HttpClient Http

<PageTitle>DivisionCicloMateriaAlumnos</PageTitle>
<div class="mb-3">
    <label class="form-label">Carrera</label>
    <InputSelect class="form-control" @bind-Value="idcarrera">
        <option value="">Seleccione una carrera</option>
        @foreach (var carrera in carreras)
        {
            <option value="@carrera.IdCarrera">@carrera.Nombre</option>
        }
    </InputSelect>
</div>
<div class="mb-3">
    <label class="form-label">Ciclo</label>
    <InputSelect class="form-control" @bind-Value="idciclo">
        <option value="">Seleccione Año lectivo</option>
        @foreach (var ciclo in divCiclo)
        {
            @foreach (var div in divisiones)
            {
                if (div.CarrerassIdCarrera == idcarrera && ciclo.DivisionesIdDivision == div.IdDivision)
                {
                    <option value="@ciclo.IdDivCic">@GetNombreDivision(ciclo.DivisionesIdDivision, ciclo.CicloIdCiclo)</option>
                }

            }

        }
    </InputSelect>
</div>


<button class="btn btn-success" @onclick="OpenModalToAdd">Cargar Profesor</button>
<button class="btn btn-primary" @onclick="OpenDuplicarMateriasModal">Duplicar Materias</button>


<div class="table-container shadow-sm mb-4" style="border-radius: 12px; overflow: hidden;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f9f9f9; padding: 10px;">
        <table class="table table-hover" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA; border-radius: 12px;">
            <thead>
                <tr style="background-color: #f0f8ff; color: #333; border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd; padding: 12px;">Nombre</th>
                    <th style="border-right: 2px solid #ddd; padding: 12px;">Profesor</th>
                    <th style="border-right: 2px solid #ddd; padding: 12px;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var DcMateria in divisionCicloMaterias)
                {
                   
                        if ( DcMateria.DivisionCicloIdDivCic == idciclo )
                        {
                            <tr style="background-color: #fff; border-bottom: 1px solid #ddd;">
                                <td style="border-right: 2px solid #ddd; padding: 10px;">@GetNombreMateria(DcMateria.MateriasIdMateria)</td>
                                <td style="border-right: 2px solid #ddd; padding: 10px;">@GetProfesorNombre(DcMateria.ProfesorIdProfesor)</td>
                                <td style="border-right: 2px solid #ddd; padding: 10px;">
                                    <div class="action-buttons m-1">
                                        <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(DcMateria, DcMateria.IdDivCicMat)"><i class="oi oi-pencil"></i></button>
                                        <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(DcMateria.IdDivCicMat)"><i class="oi oi-trash"></i></button>
                                    </div>
                                </td>
                                
                            </tr>
                        } 
                    
                }
            </tbody>
        </table>
    </div>
</div>

@* Modales y confirmaciones aquí *@

@if (isModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Editar DivisionCicloMateria" : "Agregar DivisionCicloMateria")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentDivisionCicloMateria" OnValidSubmit="@(isEdit ? EditDivisionCicloMateria : AddDivisionCicloMateria)">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">DivisionCiclo</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCicloMateria.DivisionCicloIdDivCic">
                                @foreach (var divisionCiclo in divCiclo)
                                {
                                    <option value="@divisionCiclo.IdDivCic">@GetDivisionCicloNombre(divisionCiclo.IdDivCic)</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Materia</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCicloMateria.MateriasIdMateria">
                                @foreach (var materia in materias)
                                {
                                    if (idcarrera==materia.IdCarrera)
                                    {
                                        <option value="@materia.IdMateria">@GetMateriaNombre(materia.IdMateria)</option>
                                    }
                                   
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Profesor</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCicloMateria.ProfesorIdProfesor">
                                @foreach (var profesor in profesores)
                                {
                                    <option value="@profesor.IdProfesor">@GetProfesorNombre(profesor.IdProfesor)</option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEdit) ? "Guardar Cambios" : "Agregar DivisionCicloMateria")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (isConfirmDeleteModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar esta DivisionCicloMateria?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteDivisionCicloMateria">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}
@if (isDuplicarMateriasModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Duplicar Materias</h5>
                    <button type="button" class="btn-close" @onclick="CloseDuplicarMateriasModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Ciclo Anterior</label>
                        <InputSelect class="form-control" @bind-Value="cicloAnteriorId">
                            <option value="">Seleccione un ciclo lectivo</option>
                            @foreach (var ciclo in divCiclo)
                            {
                                <option value="@ciclo.IdDivCic">@GetNombreDivision(ciclo.DivisionesIdDivision, ciclo.CicloIdCiclo)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ciclo Nuevo</label>
                        <InputSelect class="form-control" @bind-Value="cicloNuevoId">
                            <option value="">Seleccione el nuevo ciclo lectivo</option>
                            @foreach (var ciclo in divCiclo)
                            {
                                <option value="@ciclo.IdDivCic">@GetNombreDivision(ciclo.DivisionesIdDivision, ciclo.CicloIdCiclo)</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDuplicarMateriasModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="DuplicateMaterias">Duplicar Materias</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DivsionCiclosMateriaAlumnos> divisionCicloMateriaAlumnos = new List<DivsionCiclosMateriaAlumnos>();
    private List<DivisionCicloMateria> divisionCicloMaterias = new List<DivisionCicloMateria>();
    private List<Alumnos> alumnos = new List<Alumnos>();
    private List<LIbros> libros = new List<LIbros>();
    private List<Materias> materias = new List<Materias>();
    private List<Profesor> profesores = new List<Profesor>();
    private List<Ciclos> ciclos = new List<Ciclos>();
    private List<Divisiones> divisiones = new List<Divisiones>();
    private List<Carrerass> carreras = new List<Carrerass>();
    private List<DivisionCiclo> divCiclo = new List<DivisionCiclo>();

    private DivsionCiclosMateriaAlumnos currentDivisionCicloMateriaAlumno = new DivsionCiclosMateriaAlumnos();
    private DTODivisionCicloMateria currentDivisionCicloMateria = new DTODivisionCicloMateria();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private bool isConfirmDeleteModalOpen = false;
    private int idActual;
    private bool isModalOpenAlumno = false;
    private bool isEditAlumno = false;
    private int idDivisionCicloMateriaAlumnoToDelete;
    private bool isConfirmDeleteModalOpenAlumno = false;
    private int idActualAlumno;
    private int idDivisionCicloMateriaToDelete;
    private int idcarrera;
    private int idciclo;
    private int iddivision;
    private int idmateria;
    private bool isDuplicarMateriasModalOpen = false;
    private int cicloAnteriorId;
    private int cicloNuevoId;
    int idactual;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadDivisionCicloMateriaAlumnos();
        await LoadDivisionCicloMaterias();
        await LoadAlumnos();
        await LoadLibros();
        await LoadMaterias();
        await LoadProfesores();
        await LoadDivisiones();
        await LoadCiclos();
        await LoadCarreras();
        await LoadDivCiclo();
    }
  

    private void OpenDuplicarMateriasModal()
    {
        isDuplicarMateriasModalOpen = true;
    }

    private void CloseDuplicarMateriasModal()
    {
        isDuplicarMateriasModalOpen = false;
    }
    private async Task DuplicateMaterias()
    {
        try
        {
            // Cargar las materias del ciclo anterior
            var materiasAnteriores = divisionCicloMaterias.Where(m => m.DivisionCicloIdDivCic == cicloAnteriorId).ToList();

            foreach (var materia in materiasAnteriores)
            {
                // Crear una nueva instancia para la nueva materia en el ciclo nuevo
                var nuevaMateria = new DTODivisionCicloMateria
                    {
                        DivisionCicloIdDivCic = cicloNuevoId,  // Nuevo ciclo lectivo
                        MateriasIdMateria = materia.MateriasIdMateria,  // ID de la materia anterior
                        ProfesorIdProfesor = materia.ProfesorIdProfesor  // Profesor asignado
                    };

                // Enviar la nueva materia al servidor una por una
                var response = await Http.PostAsJsonAsync("api/DivisionCicloMateria", nuevaMateria);

                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error duplicating materia: {response.ReasonPhrase}");
                }
            }

            // Recargar las materias para reflejar los cambios
            await LoadDivisionCicloMaterias();

            // Cerrar el modal después de la duplicación
            CloseDuplicarMateriasModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception duplicating materias: {ex.Message}");
        }
    }



  


    private async Task LoadDivisiones()
    {
        try
        {
            divisiones = await Http.GetFromJsonAsync<List<Divisiones>>("api/Division");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Divisiones: {ex.Message}");
        }
    }

    private async Task LoadCarreras()
    {
        try
        {
            carreras = await Http.GetFromJsonAsync<List<Carrerass>>("api/Carrera");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading carreras: {ex.Message}");
        }
    }

    private async Task LoadCiclos()
    {
        try
        {
            ciclos = await Http.GetFromJsonAsync<List<Ciclos>>("api/Ciclo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Ciclos: {ex.Message}");
        }
    }

    private async Task LoadDivCiclo()
    {
        try
        {
            divCiclo = await Http.GetFromJsonAsync<List<DivisionCiclo>>("api/DivisionCiclo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading materias: {ex.Message}");
        }
    }
    private async Task LoadDivisionCicloMateriaAlumnos()
    {
        try
        {
            divisionCicloMateriaAlumnos = await Http.GetFromJsonAsync<List<DivsionCiclosMateriaAlumnos>>("api/DivisionCicloMateriaAlumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading DivisionCicloMateriaAlumnos: {ex.Message}");
        }
    }

    private async Task LoadDivisionCicloMaterias()
    {
        try
        {
            divisionCicloMaterias = await Http.GetFromJsonAsync<List<DivisionCicloMateria>>("api/DivisionCicloMateria");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading DivisionCicloMaterias: {ex.Message}");
        }
    }

 

    private async Task LoadAlumnos()
    {
        try
        {
            alumnos = await Http.GetFromJsonAsync<List<Alumnos>>("api/Alumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Alumnos: {ex.Message}");
        }
    }

    private async Task LoadLibros()
    {
        try
        {
            libros = await Http.GetFromJsonAsync<List<LIbros>>("api/Libros");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Libros: {ex.Message}");
        }
    }

    private async Task LoadMaterias()
    {
        try
        {
            materias = await Http.GetFromJsonAsync<List<Materias>>("api/Materias");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Materias: {ex.Message}");
        }
    }

    private async Task LoadProfesores()
    {
        try
        {
            profesores = await Http.GetFromJsonAsync<List<Profesor>>("api/Profesor");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Profesores: {ex.Message}");
        }
    }
    private string GetNombreDivision(int idDivision, int idCiclo)
    {
        var div = divisiones.FirstOrDefault(m => m.IdDivision == idDivision);
        if (div == null)
            return "N/A";
        var Cic = ciclos.FirstOrDefault(m => m.IdCiclo == idCiclo);
        if (Cic == null)
            return "N/A";

        return $"{div.NombreDiv}-{Cic.Fecha.ToString()}";
    }
    private string GetNombreCarrera(int idCarrera)
    {
        var carrera = carreras.FirstOrDefault(c => c.IdCarrera == idCarrera);
        return carrera?.Nombre ?? "Carrera no encontrada";
    }
    private string GetNombreMateria(int idmateria)
    {
        var materia = materias.FirstOrDefault(c => c.IdMateria == idmateria);
        return materia?.Nombre ?? "Materia no encontrada";
    }
    private string GetNombreDivision(int iddivision)
    {
        var division = divisiones.FirstOrDefault(c => c.IdDivision == iddivision);
        return division?.NombreDiv ?? "Division no encontrada";
    }
    private string GetDivisionCicloNombre(int idDivisionCiclo)
    {
        var divisionCiclo = divCiclo.FirstOrDefault(d => d.IdDivCic == idDivisionCiclo);
        if (divisionCiclo == null)
            return "N/A";

        var division = divisiones.FirstOrDefault(d => d.IdDivision == divisionCiclo.DivisionesIdDivision);
        var ciclo = ciclos.FirstOrDefault(c => c.IdCiclo == divisionCiclo.CicloIdCiclo);

        if (division == null || ciclo == null)
            return "N/A";

        return $"{division.NombreDiv}-{ciclo.Fecha}";
    }

    private string GetDivisionCicloMateriaNombre(int idDivisionCicloMateria)
    {
        var divisionCicloMateria = divisionCicloMaterias.FirstOrDefault(d => d.IdDivCicMat == idDivisionCicloMateria);
        if (divisionCicloMateria == null)
            return "N/A";

        var materia = materias.FirstOrDefault(m => m.IdMateria == divisionCicloMateria.MateriasIdMateria);
        var profesor = profesores.FirstOrDefault(p => p.IdProfesor == divisionCicloMateria.ProfesorIdProfesor);
        var divisionCiclo = divCiclo.FirstOrDefault(dc => dc.IdDivCic == divisionCicloMateria.DivisionCicloIdDivCic);

        if (materia == null || profesor == null || divisionCiclo == null)
            return "N/A";

        var division = divisiones.FirstOrDefault(d => d.IdDivision == divisionCiclo.DivisionesIdDivision);
        var ciclo = ciclos.FirstOrDefault(c => c.IdCiclo == divisionCiclo.CicloIdCiclo);

        if (division == null || ciclo == null)
            return "N/A";

        return $"{division.NombreDiv}-{ciclo.Fecha}-{materia.Nombre}-{profesor.Nombre_Prof}";
    }

    private string GetAlumnoNombre(int idAlumno)
    {
        var alumno = alumnos.FirstOrDefault(a => a.IdAlumno == idAlumno);
        if (alumno == null)
            return "N/A";

        return $"{alumno.Nombre} {alumno.Apellido}";
    }

    private string GetLibroNombre(int idLibro)
    {
        var libro = libros.FirstOrDefault(l => l.Id_Libro == idLibro);
        if (libro == null)
            return "N/A";

        return libro.Nombre_Lib;
    }

    private string GetMateriaNombre(int idMateria)
    {
        var materia = materias.FirstOrDefault(m => m.IdMateria == idMateria);
        if (materia == null)
            return "N/A";

        return materia.Nombre;
    }

    private string GetProfesorNombre(int idProfesor)
    {
        var profesor = profesores.FirstOrDefault(p => p.IdProfesor == idProfesor);
        if (profesor == null)
            return "N/A";

        return $"{ profesor.Nombre_Prof}-{profesor.Apellido_Prof}";
    }

    private void OpenModalToAddDivisionCicloMateria()
    {
        currentDivisionCicloMateria = new DTODivisionCicloMateria();
        isModalOpen = true;
        isEdit = false;
    }

    private void OpenModalToAddDivisionCicloMateriaAlumno()
    {
        currentDivisionCicloMateriaAlumno = new DivsionCiclosMateriaAlumnos();
        isModalOpen = true;
        isEdit = false;
    }

    private void OpenModalToEditDivisionCicloMateria(DivisionCicloMateria divisionCicloMateria, int id)
    {
        currentDivisionCicloMateria = new DTODivisionCicloMateria
        {
            DivisionCicloIdDivCic = divisionCicloMateria.DivisionCicloIdDivCic,
            MateriasIdMateria = divisionCicloMateria.MateriasIdMateria,
            ProfesorIdProfesor = divisionCicloMateria.ProfesorIdProfesor
           
        };
        idActual = id;
        isModalOpen = true;
        isEdit = true;
    }

    private void OpenModalToEditDivisionCicloMateriaAlumno(DivsionCiclosMateriaAlumnos divisionCicloMateriaAlumno)
    {
        currentDivisionCicloMateriaAlumno = divisionCicloMateriaAlumno;
        idActual = divisionCicloMateriaAlumno.IdDivCicMatAlum;
        isModalOpen = true;
        isEdit = true;
    }

    private void OpenConfirmDeleteModalDivisionCicloMateria(int id)
    {
        idActual = id;
        isConfirmDeleteModalOpen = true;
    }

    private void OpenConfirmDeleteModalDivisionCicloMateriaAlumno(int id)
    {
        idActual = id;
        isConfirmDeleteModalOpen = true;
    }
    private void OpenModalToAdd()
    {
        currentDivisionCicloMateria = new DTODivisionCicloMateria();
        isEdit = false;
        isModalOpen = true;
    }

    private void OpenModalToEdit(DivisionCicloMateria divisionCicloMateria, int id)
    {
        currentDivisionCicloMateria = new DTODivisionCicloMateria
            {
                DivisionCicloIdDivCic = divisionCicloMateria.DivisionCicloIdDivCic,
                MateriasIdMateria = divisionCicloMateria.MateriasIdMateria,
                ProfesorIdProfesor = divisionCicloMateria.ProfesorIdProfesor
            };
        idactual = id;
        isEdit = true;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void OpenConfirmDeleteModal(int id)
    {
        idDivisionCicloMateriaToDelete = id;
        isConfirmDeleteModalOpen = true;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task AddDivisionCicloMateria()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/DivisionCicloMateria", currentDivisionCicloMateria);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMaterias();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error adding divisionCicloMateria: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding divisionCicloMateria: {ex.Message}");
        }
    }

    private async Task EditDivisionCicloMateria()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/DivisionCicloMateria/{idactual}", currentDivisionCicloMateria);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMaterias();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error editing divisionCicloMateria: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception editing divisionCicloMateria: {ex.Message}");
        }
    }

    private async Task DeleteDivisionCicloMateria()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/DivisionCicloMateria/{idDivisionCicloMateriaToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMaterias();
                CloseConfirmDeleteModal();
            }
            else
            {
                Console.WriteLine($"Error deleting divisionCicloMateria: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting divisionCicloMateria: {ex.Message}");
        }
    }
    private void OpenModalToAddAlumno()
    {
        currentDivisionCicloMateriaAlumno = new DivsionCiclosMateriaAlumnos();
        isEditAlumno = false;
        isModalOpenAlumno = true;
    }

    private void OpenModalToEditAlumno(DivsionCiclosMateriaAlumnos divisionCicloMateriaAlumno, int id)
    {
        currentDivisionCicloMateriaAlumno = new DivsionCiclosMateriaAlumnos
            {
                DivisionCicloMateriaIdDivCicMat = divisionCicloMateriaAlumno.DivisionCicloMateriaIdDivCicMat,
                AlumnosIdAlumno = divisionCicloMateriaAlumno.AlumnosIdAlumno,
             
            };
        idActualAlumno = id;
        isEditAlumno = true;
        isModalOpenAlumno = true;
    }

    private void CloseModalAlumno()
    {
        isModalOpenAlumno = false;
    }

    private void OpenConfirmDeleteModalAlumno(int id)
    {
        idDivisionCicloMateriaAlumnoToDelete = id;
        isConfirmDeleteModalOpenAlumno = true;
    }

    private void CloseConfirmDeleteModalAlumno()
    {
        isConfirmDeleteModalOpenAlumno = false;
    }

    private async Task AddDivisionCicloMateriaAlumno()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/DivisionCicloMateriaAlumnos", currentDivisionCicloMateriaAlumno);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMateriaAlumnos();
                CloseModalAlumno();
            }
            else
            {
                Console.WriteLine($"Error adding DivisionCicloMateriaAlumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding DivisionCicloMateriaAlumno: {ex.Message}");
        }
    }

    private async Task EditDivisionCicloMateriaAlumno()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/DivisionCicloMateriaAlumnos/{idActualAlumno}", currentDivisionCicloMateriaAlumno);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMateriaAlumnos();
                CloseModalAlumno();
            }
            else
            {
                Console.WriteLine($"Error editing DivisionCicloMateriaAlumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception editing DivisionCicloMateriaAlumno: {ex.Message}");
        }
    }

    private async Task DeleteDivisionCicloMateriaAlumno()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/DivisionCicloMateriaAlumnos/{idDivisionCicloMateriaAlumnoToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMateriaAlumnos();
                CloseConfirmDeleteModalAlumno();
            }
            else
            {
                Console.WriteLine($"Error deleting DivisionCicloMateriaAlumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting DivisionCicloMateriaAlumno: {ex.Message}");
        }
    }
}











