@page "/Notass"
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore

@inject HttpClient Http

<PageTitle>DivisionCicloMateriaAlumnos</PageTitle>
<button class="btn btn-success" @onclick="OpenModalToAddAlumno">Cargar DivisionCicloMateriaAlumno</button>
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr style="border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd;">Division-Ciclo Materia</th>
                    <th style="border-right: 2px solid #ddd;">Alumno</th>
                    <th style="border-right: 2px solid #ddd;">Libro</th>
                    <th style="border-right: 2px solid #ddd;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var divisionCicloMateriaAlumno in divisionCicloMateriaAlumnos)
                {
                    <tr>
                        <td style="border-right: 2px solid #ddd;">@GetDivisionCicloMateriaNombre(divisionCicloMateriaAlumno.DivisionCicloMateriaIdDivCicMat)</td>
                        <td style="border-right: 2px solid #ddd;">@GetAlumnoNombre(divisionCicloMateriaAlumno.AlumnosIdAlumno)</td>
                        <td style="border-right: 2px solid #ddd;">@GetLibroNombre(divisionCicloMateriaAlumno.LibrosId_Libro)</td>
                        <td>
                            <div class="action-buttons m-1">
                                <button class="btn btn-primary me-2" @onclick="() => OpenModalToEditAlumno(divisionCicloMateriaAlumno, divisionCicloMateriaAlumno.IdDivCicMatAlum)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModalAlumno(divisionCicloMateriaAlumno.IdDivCicMatAlum)"><i class="oi oi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (isModalOpenAlumno)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditAlumno ? "Editar DivisionCicloMateriaAlumno" : "Agregar DivisionCicloMateriaAlumno")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModalAlumno"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentDivisionCicloMateriaAlumno" OnValidSubmit="@(isEditAlumno ? EditDivisionCicloMateriaAlumno : AddDivisionCicloMateriaAlumno)">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">DivisionCicloMateria</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCicloMateriaAlumno.DivisionCicloMateriaIdDivCicMat">
                                @foreach (var divisionCicloMateria in divisionCicloMaterias)
                                {
                                    <option value="@divisionCicloMateria.IdDivCicMat">@GetDivisionCicloMateriaNombre(divisionCicloMateria.IdDivCicMat)</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Alumno</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCicloMateriaAlumno.AlumnosIdAlumno">
                                @foreach (var alumno in alumnos)
                                {
                                    <option value="@alumno.IdAlumno">@GetAlumnoNombre(alumno.IdAlumno)</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Libro</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCicloMateriaAlumno.LibrosId_Libro">
                                @foreach (var libro in libros)
                                {
                                    <option value="@libro.Id_Libro">@GetLibroNombre(libro.Id_Libro)</option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEditAlumno) ? "Guardar Cambios" : "Agregar DivisionCicloMateriaAlumno")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (isConfirmDeleteModalOpenAlumno)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDeleteModalAlumno"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar este registro?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModalAlumno">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteDivisionCicloMateriaAlumno">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}


@code{
    private List<DivsionCiclosMateriaAlumnos> divisionCicloMateriaAlumnos = new List<DivsionCiclosMateriaAlumnos>();
    private List<DivisionCicloMateria> divisionCicloMaterias = new List<DivisionCicloMateria>();
    private List<Alumnos> alumnos = new List<Alumnos>();
    private List<LIbros> libros = new List<LIbros>();
    private DivsionCiclosMateriaAlumnos currentDivisionCicloMateriaAlumno = new DivsionCiclosMateriaAlumnos();
    private bool isModalOpenAlumno = false;
    private bool isEditAlumno = false;
    private int idDivisionCicloMateriaAlumnoToDelete;
    private bool isConfirmDeleteModalOpenAlumno = false;
    private int idActualAlumno;

    protected override async Task OnInitializedAsync()
    {
        await LoadDivisionCicloMateriaAlumnos();
        await LoadDivisionCicloMaterias();
        await LoadAlumnos();
        await LoadLibros();
    }

    private async Task LoadDivisionCicloMateriaAlumnos()
    {
        try
        {
            divisionCicloMateriaAlumnos = await Http.GetFromJsonAsync<List<DivsionCiclosMateriaAlumnos>>("api/DivisionCicloMateriaAlumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading DivisionCicloMateriaAlumnos: {ex.Message}");
        }
    }

    private async Task LoadDivisionCicloMaterias()
    {
        try
        {
            divisionCicloMaterias = await Http.GetFromJsonAsync<List<DivisionCicloMateria>>("api/DivisionCicloMateria");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading DivisionCicloMaterias: {ex.Message}");
        }
    }

    private async Task LoadAlumnos()
    {
        try
        {
            alumnos = await Http.GetFromJsonAsync<List<Alumnos>>("api/Alumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Alumnos: {ex.Message}");
        }
    }

    private async Task LoadLibros()
    {
        try
        {
            libros = await Http.GetFromJsonAsync<List<LIbros>>("api/Libros");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Libros: {ex.Message}");
        }
    }

    private string GetDivisionCicloMateriaNombre(int id)
    {
        var divisionCicloMateria = divisionCicloMaterias.FirstOrDefault(dcm => dcm.IdDivCicMat == id);
        return divisionCicloMateria != null ? $"Division: {divisionCicloMateria.DivisionCicloIdDivCic} - Materia: {divisionCicloMateria.MateriasIdMateria}" : "N/A";
    }

    private string GetAlumnoNombre(int id)
    {
        var alumno = alumnos.FirstOrDefault(a => a.IdAlumno == id);
        return alumno != null ? $"{alumno.Nombre} {alumno.Apellido}" : "N/A";
    }

    private string GetLibroNombre(int id)
    {
        var libro = libros.FirstOrDefault(l => l.Id_Libro == id);
        return libro != null ? libro.Nombre_Lib : "N/A";
    }

    private void OpenModalToAddAlumno()
    {
        currentDivisionCicloMateriaAlumno = new DivsionCiclosMateriaAlumnos();
        isEditAlumno = false;
        isModalOpenAlumno = true;
    }

    private void OpenModalToEditAlumno(DivsionCiclosMateriaAlumnos divisionCicloMateriaAlumno, int id)
    {
        currentDivisionCicloMateriaAlumno = new DivsionCiclosMateriaAlumnos
            {
                DivisionCicloMateriaIdDivCicMat = divisionCicloMateriaAlumno.DivisionCicloMateriaIdDivCicMat,
                AlumnosIdAlumno = divisionCicloMateriaAlumno.AlumnosIdAlumno,
                LibrosId_Libro = divisionCicloMateriaAlumno.LibrosId_Libro
            };
        idActualAlumno = id;
        isEditAlumno = true;
        isModalOpenAlumno = true;
    }

    private void CloseModalAlumno()
    {
        isModalOpenAlumno = false;
    }

    private void OpenConfirmDeleteModalAlumno(int id)
    {
        idDivisionCicloMateriaAlumnoToDelete = id;
        isConfirmDeleteModalOpenAlumno = true;
    }

    private void CloseConfirmDeleteModalAlumno()
    {
        isConfirmDeleteModalOpenAlumno = false;
    }

    private async Task AddDivisionCicloMateriaAlumno()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/DivisionCicloMateriaAlumnos", currentDivisionCicloMateriaAlumno);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMateriaAlumnos();
                CloseModalAlumno();
            }
            else
            {
                Console.WriteLine($"Error adding DivisionCicloMateriaAlumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding DivisionCicloMateriaAlumno: {ex.Message}");
        }
    }

    private async Task EditDivisionCicloMateriaAlumno()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/DivisionCicloMateriaAlumnos/{idActualAlumno}", currentDivisionCicloMateriaAlumno);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMateriaAlumnos();
                CloseModalAlumno();
            }
            else
            {
                Console.WriteLine($"Error editing DivisionCicloMateriaAlumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception editing DivisionCicloMateriaAlumno: {ex.Message}");
        }
    }

    private async Task DeleteDivisionCicloMateriaAlumno()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/DivisionCicloMateriaAlumnos/{idDivisionCicloMateriaAlumnoToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCicloMateriaAlumnos();
                CloseConfirmDeleteModalAlumno();
            }
            else
            {
                Console.WriteLine($"Error deleting DivisionCicloMateriaAlumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting DivisionCicloMateriaAlumno: {ex.Message}");
        }
    }
  }