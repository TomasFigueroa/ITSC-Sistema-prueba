@page "/Alumno"
@using Microsoft.EntityFrameworkCore
@inject HttpClient Http

<PageTitle>Alumnos</PageTitle>
<button class="btn btn-success" @onclick="OpenModalToAdd">Cargar Alumno</button>
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr style="border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd;">Nombre</th>
                    <th style="border-right: 2px solid #ddd;">Apellido</th>
                    <th style="border-right: 2px solid #ddd;">DNI</th>
                    <th style="border-right: 2px solid #ddd;">CUIL</th>
                    <th style="border-right: 2px solid #ddd;">Fecha de Nacimiento</th>
                    <th style="border-right: 2px solid #ddd;">Tbase</th>
                    <th style="border-right: 2px solid #ddd;">Nacionalidad</th>
                    <th style="border-right: 2px solid #ddd;">Estado</th>
                    <th style="border-right: 2px solid #ddd;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var alumno in alumnos)
                {
                    <tr>
                        <td style="border-right: 2px solid #ddd;">@alumno.Nombre</td>
                        <td style="border-right: 2px solid #ddd;">@alumno.Apellido</td>
                        <td style="border-right: 2px solid #ddd;">@alumno.DNI_Alum</td>
                        <td style="border-right: 2px solid #ddd;">@alumno.Cuil</td>
                        <td style="border-right: 2px solid #ddd;">@alumno.Fecha_Nac.ToShortDateString()</td>
                        <td style="border-right: 2px solid #ddd;">@alumno.Tbase</td>
                        <td style="border-right: 2px solid #ddd;">@alumno.Nacionalidad</td>
                        <td style="border-right: 2px solid #ddd;">@(alumno.Estado ? "Activo" : "Inactivo")</td>
                        <td>
                            <div class="action-buttons m-1">
                                <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(alumno, alumno.IdAlumno)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(alumno.IdAlumno)"><i class="oi oi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (isModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Editar Alumno" : "Agregar Alumno")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentAlumno" OnValidSubmit="@(isEdit ? EditAlumno : AddAlumno)">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" @bind-Value="currentAlumno.Nombre" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Apellido</label>
                            <InputText class="form-control" @bind-Value="currentAlumno.Apellido" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">DNI</label>
                            <InputNumber class="form-control" @bind-Value="currentAlumno.DNI_Alum" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">CUIL</label>
                            <InputNumber class="form-control" @bind-Value="currentAlumno.Cuil" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha de Nacimiento</label>
                            <InputDate class="form-control" @bind-Value="currentAlumno.Fecha_Nac" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Tbase</label>
                            <InputText class="form-control" @bind-Value="currentAlumno.Tbase" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nacionalidad</label>
                            <InputSelect class="form-select" @bind-Value="currentAlumno.Nacionalidad">
                                @foreach (var nacionalidad in nacionalidades)
                                {
                                    <option value="@nacionalidad">@nacionalidad</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Estado</label>
                            <InputCheckbox class="form-check-input" @bind-Value="currentAlumno.Estado" />
                            <label class="form-check-label">@((currentAlumno.Estado) ? "Activo" : "Inactivo")</label>
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEdit) ? "Guardar Cambios" : "Agregar Alumno")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (isConfirmDeleteModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar este Alumno?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteAlumno">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Alumnos> alumnos = new List<Alumnos>();
    private DTOAlumnos currentAlumno = new DTOAlumnos();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private int idAlumnoToDelete;
    private bool isConfirmDeleteModalOpen = false;
    private List<string> nacionalidades = new List<string> { "Argentina", "Brasil", "Chile", "Uruguay", "Paraguay" }; // Listado de nacionalidades pre cargadas
    private int idactual;

    protected override async Task OnInitializedAsync()
    {
        await LoadAlumnos();
    }

    private async Task LoadAlumnos()
    {
        try
        {
            alumnos = await Http.GetFromJsonAsync<List<Alumnos>>("api/Alumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading alumnos: {ex.Message}");
        }
    }

    private void OpenModalToAdd()
    {
        currentAlumno = new DTOAlumnos();
        isEdit = false;
        isModalOpen = true;
    }

    private void OpenModalToEdit(Alumnos alumno, int id)
    {
        currentAlumno = new DTOAlumnos
            {
                Nombre = alumno.Nombre,
                Apellido = alumno.Apellido,
                DNI_Alum = alumno.DNI_Alum,
                Cuil = alumno.Cuil,
                Fecha_Nac = alumno.Fecha_Nac,
                Tbase = alumno.Tbase,
                Nacionalidad = alumno.Nacionalidad,
                Estado = alumno.Estado
            };
        idactual = id;
        isEdit = true;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        currentAlumno = new DTOAlumnos(); // Limpiar el formulario al cerrar
    }

    private void OpenConfirmDeleteModal(int id)
    {
        idAlumnoToDelete = id;
        isConfirmDeleteModalOpen = true;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task AddAlumno()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Alumnos", currentAlumno);
            if (response.IsSuccessStatusCode)
            {
                await LoadAlumnos();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error adding alumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding alumno: {ex.Message}");
        }
    }

    private async Task EditAlumno()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Alumnos/{idactual}", currentAlumno);
            if (response.IsSuccessStatusCode)
            {
                await LoadAlumnos();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error editing alumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception editing alumno: {ex.Message}");
        }
    }

    private async Task DeleteAlumno()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Alumnos/{idAlumnoToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadAlumnos();
                CloseConfirmDeleteModal();
            }
            else
            {
                Console.WriteLine($"Error deleting alumno: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting alumno: {ex.Message}");
        }
    }
}




