@page "/notas"
@inject HttpClient Http
@using System.Net.Http.Json

<h3>Gestión de Notas</h3>

<button class="btn btn-success" @onclick="OpenModalToAdd">Agregar Nota</button>

<!-- Filtros -->
<div class="mb-3">
    <label class="form-label">Filtrar por Alumno (DNI)</label>
    <input type="text" class="form-control" @bind="filtroDNI" placeholder="DNI del Alumno" />
</div>
<select class="form-control" @bind="FiltroMateriaId">
    <option value="">Seleccione una materia</option>
    @foreach (var materia in materias)
    {
        <option value="@materia.IdMateria">@materia.Nombre</option>
    }
</select>

<!-- Tabla de Notas -->
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr style="border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd;">Alumno</th>
                    <th style="border-right: 2px solid #ddd;">Nota</th>
                    <th style="border-right: 2px solid #ddd;">Fecha</th>
                    <th style="border-right: 2px solid #ddd;">Tipo Evaluación</th>
                    <th style="border-right: 2px solid #ddd;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var nota in notasFiltradas)
                {
                    <tr>
                        <td style="border-right: 2px solid #ddd;">@GetNombreAlumno(nota.DivsionCiclosMateriaAlumnosIdDivCicMatAlum)</td>
                        <td style="border-right: 2px solid #ddd;">@nota.Nota</td>
                        <td style="border-right: 2px solid #ddd;">@nota.Fecha.ToShortDateString()</td>
                        <td style="border-right: 2px solid #ddd;">@GetNombreEvaluacion(nota.TipoEvaluacionIdTipoEva)</td>
                        <td>
                            <div class="action-buttons m-1">
                                <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(nota, nota.IdNotas)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(nota.IdNotas)"><i class="oi oi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal para agregar y editar notas -->
@if (isModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEdit) ? "Editar Nota" : "Agregar Nota")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="notaInput" class="form-label">Nota:</label>
                        <input type="number" class="form-control" id="notaInput" @bind="currentNota.Nota" min="1" max="10"  />
                    </div>

                      @*   <div class="mb-3">
                            <label class="form-label">Materia</label>
                            <select class="form-control" @bind="selectedMateriaId" @oninput="FiltrarAlumnosPorMateria">
                                <option value="">Seleccione una materia</option>
                                @foreach (var materia in materias)
                                {
                                    <option value="@materia.IdMateria">@materia.Nombre</option>
                                }
                            </select>
                        </div> *@

                        <div class="mb-3">
                            <label class="form-label">Alumno</label>
                            <select class="form-control" @bind="currentNota.Materias">
                                <option value="">Seleccione un alumno</option>
                                @foreach (var alumno in DivsionCiclosMateriaAlumnos)
                                {
                                    <option value="@alumno.IdDivCicMatAlum">@GetNombreAlumno(alumno.IdDivCicMatAlum)</option>
                                }
                            </select>
                        </div>

                    <div class="mb-3">
                        <label for="tipoEvaluacionSelect" class="form-label">Tipo de Evaluación:</label>
                        <select class="form-select" id="tipoEvaluacionSelect" @bind="currentNota.TipoEvaluacionIdTipoEva">
                            <option value="0">Seleccione una evaluación</option>
                            @foreach (var evaluacion in tipoEvaluaciones)
                            {
                                <option value="@evaluacion.IdTipoEva">@evaluacion.NombreEva</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="@(isEdit ? EditNota : AddNota)">
                        @(isEdit ? "Guardar cambios" : "Agregar Nota")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Tabla de notas -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Alumno</th>
            <th>Materia</th>
            <th>Tipo Evaluacion</th>
            <th>Fecha</th>
            <th>Nota</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (notasFiltradas != null && notasFiltradas.Any())
        {
            @foreach (var nota in notasFiltradas)
            {
                <tr>
                    <td>@nota.AlumnoNombre</td>
                    <td>@nota.Materia</td>
                    <td>@nota.TipoEvaluacion</td>
                    <td>@nota.Fecha</td>
                    <td>@nota.Nota</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => OpenModalToEdit(nota)">Editar</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">No se encontraron notas.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal de confirmación para eliminar -->
@if (isConfirmDeleteModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar esta nota?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteNota">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Botón para agregar nota -->
<button class="btn btn-primary" @onclick="OpenModalToAdd">Agregar Nota</button>

@code {
    private List<NotasDto> notasFiltradas = new();
    private List<Materias> materias = new();
    private List<DivsionCiclosMateriaAlumnos> alumnos = new();
    private List<TipoEvaluacion> tipoEvaluaciones = new();
    private Notas currentNota = new();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private Notas currentNota = new();
    private bool isConfirmDeleteModalOpen = false;
    private int idToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotas();
        await LoadMaterias();
        await LoadTipoEvaluaciones();
        await LoadAlumnos();
    }

    private async Task LoadNotas()
    {
        notasFiltradas = await Http.GetFromJsonAsync<List<NotasDto>>("api/Notas/GetNotas");
    }
    private async Task LoadAlumnos()
    {
        alumnos = await Http.GetFromJsonAsync<List<DivsionCiclosMateriaAlumnos>>("api/DivisionCicloMateriaAlumnos");
        Console.WriteLine($"Número de alumnos cargados: {alumnos.Count}");
    }

    private async Task LoadMaterias()
    {
        materias = await Http.GetFromJsonAsync<List<Materias>>("api/Materias");
    }

    private async Task LoadTipoEvaluaciones()
    {
        tipoEvaluaciones = await Http.GetFromJsonAsync<List<TipoEvaluacion>>("api/TipoNota");
    }

    private void OpenModalToAdd()
    {
        currentNota = new Notas();
        isEdit = false;
        isModalOpen = true;
        isEdit = false;
        currentNota = new Notas();
    }

    private void OpenModalToEdit(Notas nota, int id)
    {
        currentNota = nota;
        isEdit = true;
        isModalOpen = true;
        isEdit = true;
        currentNota = new Notas
        {
            IdNotas = nota.IdNotas,
            Nota = nota.Nota,
            Fecha = nota.Fecha,
            DivsionCiclosMateriaAlumnosIdDivCicMatAlum = nota.MateriasIdMateria,
            TipoEvaluacionIdTipoEva = nota.TipoEvaluacionIdTipoEva
        };
    }

    private void CloseModal()
    {
        isModalOpen = false;

    }

    private void OpenConfirmDeleteModal(int id)
    {
        isConfirmDeleteModalOpen = true;
        idToDelete = id;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task AddNota()
    {
        // Lógica para realizar el POST de los datos actuales del formulario al servidor
        var response = await Http.PostAsJsonAsync("api/Notas", currentNota);

        if (response.IsSuccessStatusCode)
        {
            try
            {
                await Http.PostAsJsonAsync("api/Notas", currentNota);
                await LoadNotas();
                await LoadAlumnos();
                await LoadMaterias();
                await LoadTipoEvaluaciones();
                await LoadDivisionCicloMateriaAlumno();
                FiltrarAlumnos();
                CloseModal();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding nota: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding nota: {ex.Message}");
        }

    }

    private async Task EditNota()
    {
        try
        {
            await Http.PutAsJsonAsync($"api/Notas/{idToDelete}", currentNota);
            await LoadNotas();
            await LoadAlumnos();
            await LoadMaterias();
            await LoadTipoEvaluaciones();
            await LoadDivisionCicloMateriaAlumno();
            FiltrarAlumnos();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing nota: {ex.Message}");
        }
    }

    private async Task DeleteNota()
    {
        try
        {
            await Http.DeleteAsync($"api/Notas/{idToDelete}");
            await LoadNotas();
            await LoadAlumnos();
            await LoadMaterias();
            await LoadTipoEvaluaciones();
            await LoadDivisionCicloMateriaAlumno();
            FiltrarAlumnos();
            CloseConfirmDeleteModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting nota: {ex.Message}");
        }
    }









