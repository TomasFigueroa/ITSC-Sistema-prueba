@page "/notas"
@attribute [Authorize]
@inject HttpClient Http
@using System.Net.Http.Json

<!-- Botón para agregar nota -->
<button class="btn btn-primary" @onclick="OpenModalToAdd">Agregar Nota</button>
@if (mostrarAlerta)
{

    <div class="alert alert-success d-flex align-items-center alert-right animated-alert" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check-circle-fill me-2" viewBox="0 0 16 16">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.97 11.03a.75.75 0 0 0 1.08.022L11.97 8a.75.75 0 1 0-1.08-1.04L7.5 10.21 5.646 8.354a.75.75 0 1 0-1.08 1.04l2 2z" />
        </svg>
        <div>
            Nota cargada correctamente.
        </div>
    </div>
}
@if(mostraError)
{
    <div class="alert alert-danger d-flex align-items-center alert-right animated-alert" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-x-circle-fill me-2" viewBox="0 0 16 16">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
        </svg>
        <div>
            No se cargó correctamente el alumno.
        </div>
    </div>
    
}




<!-- Modal para agregar/editar notas -->
@if (isModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEdit) ? "Editar Nota" : "Agregar Nota")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="notaInput" class="form-label">Nota:</label>
                        <input type="number" class="form-control" id="notaInput" @bind="currentNota.Nota" min="1" max="10" />
                    </div>

                    <div class="mb-3">
                        <label for="fechaInput" class="form-label">Fecha:</label>
                        <input type="date" class="form-control" id="fechaInput" @bind="currentNota.Fecha" />
                    </div>

                    <div class="mb-3">
                        <label for="alumnoSelect" class="form-label">Alumno:</label>
                        <InputSelect class="form-select" id="alumnoSelect" @bind-Value="currentNota.Materias">
                            <option value="0">Seleccione un alumno</option>
                            @foreach (var alumno in alumnos)
                            {
                                <option value="@alumno.IdDivCicMatAlum">@GetAlumnoNombre(alumno.AlumnosIdAlumno)</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label for="tipoEvaluacionSelect" class="form-label">Tipo de Evaluación:</label>
                        <InputSelect class="form-select" id="tipoEvaluacionSelect" @bind-Value="currentNota.TipoEvaluacionIdTipoEva">
                            <option value="0">Seleccione una evaluación</option>
                            @foreach (var evaluacion in tipoEvaluaciones)
                            {
                                <option value="@evaluacion.IdTipoEva">@evaluacion.NombreEva</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="@(isEdit ? EditNota : AddNota)">
                        @(isEdit ? "Guardar cambios" : "Agregar Nota")
                    </button>
                </div>
            </div>
        </div>
    </div>
}


<!-- Tabla de notas -->
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
<div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
<table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
    <thead>
        <tr border-bottom: 2px solid #ddd;>
            <th style="border-right: 2px solid #ddd;">Alumno</th>
            <th style="border-right: 2px solid #ddd;">Materia</th>
            <th style="border-right: 2px solid #ddd;">Tipo Evaluacion</th>
            <th style="border-right: 2px solid #ddd;">Fecha</th>
            <th style="border-right: 2px solid #ddd;">Nota</th>
            <th style="border-right: 2px solid #ddd;">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (notasFiltradas != null && notasFiltradas.Any())
        {
            @foreach (var nota in notasFiltradas)
            {
                @foreach (var notasmod in Notas)
                        {
                            @if (nota.Id == notasmod.IdNotas)
                            {
                                <tr>
                                    <td style="border-right: 2px solid #ddd;">@nota.AlumnoNombre</td>
                                    <td style="border-right: 2px solid #ddd;">@nota.Materia</td>
                                    <td style="border-right: 2px solid #ddd;">@nota.TipoEvaluacion</td>
                                    <td style="border-right: 2px solid #ddd;">@nota.Fecha</td>
                                    <td style="border-right: 2px solid #ddd;">@nota.Nota</td>
                                    <td style="border-right: 2px solid #ddd;">
                                        <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(notasmod, notasmod.IdNotas)"><i class="oi oi-pencil"></i></button>
                                        <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(nota.Id)"><i class="oi oi-trash"></i></button>
                                    </td>
                                </tr>
                            }
                            
                        }
                       
            }
        }
        else
        {
            <tr>
                <td colspan="5">No se encontraron notas.</td>
            </tr>
        }
    </tbody>
</table>
</div>
</div>

<!-- Modal de confirmación para eliminar -->
@if (isConfirmDeleteModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar esta nota?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteNota">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private List<NotasDto> notasFiltradas = new();
    private List<Materias> materias = new();
    private List<DivsionCiclosMateriaAlumnos> alumnos = new();
    private List<Alumnos> alumno = new();
    private List<TipoEvaluacion> tipoEvaluaciones = new();
    private DTONotas currentNota = new();
    private List<Notas> Notas = new();
    private Notas Nota = new();
    private bool mostrarAlerta = false;
    private bool mostraError = false;
    private bool isModalOpen = false;
    private bool isEdit = false;
    private bool isConfirmDeleteModalOpen = false;
    private int idactual;
    private int idToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotas();
        await LoadMaterias();
        await LoadTipoEvaluaciones();
        await LoadAlumnos();
        await LoadAlumno();
        await LoadNotasMOD();
    }

    private async Task LoadNotas()
    {
        notasFiltradas = await Http.GetFromJsonAsync<List<NotasDto>>("api/Notas/GetNotas");
    }
    private async Task LoadAlumnos()
    {
        alumnos = await Http.GetFromJsonAsync<List<DivsionCiclosMateriaAlumnos>>("api/DivisionCicloMateriaAlumnos");
        Console.WriteLine($"Número de alumnos cargados: {alumnos.Count}");
    }
    private async Task LoadAlumno()
    {
        alumno = await Http.GetFromJsonAsync<List<Alumnos>>("api/Alumnos");
        Console.WriteLine($"Número de alumnos cargados: {alumnos.Count}");
    }

    private async Task LoadMaterias()
    {
        materias = await Http.GetFromJsonAsync<List<Materias>>("api/Materias");
    }
    private async Task LoadNotasMOD()
    {
        Notas = await Http.GetFromJsonAsync<List<Notas>>("api/Notas/api/Notas");
    }

    private async Task LoadTipoEvaluaciones()
    {
        tipoEvaluaciones = await Http.GetFromJsonAsync<List<TipoEvaluacion>>("api/TipoNota");
    }
    private string GetAlumnoNombre(int idAlumno)
    {
        var alumn = alumno.FirstOrDefault(m => m.IdAlumno == idAlumno);
        if (alumn == null)
            return "N/A";

        return $"{alumn.DNI_Alum.ToString()}-{ alumn.Nombre.ToString()}-{alumn.Apellido}";
    }
    private void MostrarError()
    {
        mostraError = true;

        // Crear un temporizador para ocultar la alerta después de 5 segundos
        var timer = new System.Timers.Timer(5000); // 5000 ms = 5 segundos
        timer.Elapsed += (sender, e) =>
        {
            mostraError = false;
            InvokeAsync(StateHasChanged); // Asegurar que el UI se actualice
            timer.Dispose(); // Liberar el temporizador
        };
        timer.Start();
    }
    private void MostrarAlerta()
    {
        mostrarAlerta = true;

        // Crear un temporizador para ocultar la alerta después de 5 segundos
        var timer = new System.Timers.Timer(5000); // 5000 ms = 5 segundos
        timer.Elapsed += (sender, e) =>
        {
            mostrarAlerta = false;
            InvokeAsync(StateHasChanged); // Asegurar que el UI se actualice
            timer.Dispose(); // Liberar el temporizador
        };
        timer.Start();
    }

    private void OpenModalToAdd()
    {
        LoadNotas();
        LoadMaterias();
        LoadTipoEvaluaciones();
        LoadAlumnos();

        isModalOpen = true;
        isEdit = false;
        currentNota = new DTONotas();
    }

    private void OpenModalToEdit(Notas nota, int id)
    {
        LoadNotasMOD();
        isModalOpen = true;
        isEdit = true;
        idactual = id;
        currentNota = new DTONotas
            {
                Nota = nota.Nota,
                Fecha = nota.Fecha,
                Materias = nota.DivsionCiclosMateriaAlumnosIdDivCicMatAlum,
                TipoEvaluacionIdTipoEva = nota.TipoEvaluacionIdTipoEva
            };
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void OpenConfirmDeleteModal(int id)
    {
        isConfirmDeleteModalOpen = true;
        idToDelete = id;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task AddNota()
    {
        // Lógica para realizar el POST de los datos actuales del formulario al servidor

        try
        {
            var response = await Http.PostAsJsonAsync("api/Notas", currentNota);

            if (response.IsSuccessStatusCode)
            {
                // Si el POST es exitoso, cierra el modal y actualiza la lista de notas
                CloseModal();
                MostrarAlerta();
                await LoadAlumnos();
                await LoadAlumno();
                await LoadNotas();
            }
            else
            {
                // Si falla, mostrar algún error al usuario
                MostrarError();
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Error al agregar la nota: " + error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding divisionCicloMateria: {ex.Message}");
        }
    }

    private async Task EditNota()
    {
        await Http.PutAsJsonAsync($"api/Notas/{idactual}", currentNota);
        CloseModal();
        await LoadNotas();
    }

    private async Task DeleteNota()
    {
        await Http.DeleteAsync($"api/Notas/{idToDelete}");
        CloseConfirmDeleteModal();
        await LoadNotas();
    }
}
