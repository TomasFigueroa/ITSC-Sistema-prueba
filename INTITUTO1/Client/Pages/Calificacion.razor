@page "/notas"
@inject HttpClient Http
@using System.Net.Http.Json

<h3>Gestión de Notas</h3>

<!-- Modal para agregar/editar notas -->
@if (isModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEdit) ? "Editar Nota" : "Agregar Nota")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="notaInput" class="form-label">Nota:</label>
                        <input type="number" class="form-control" id="notaInput" @bind="currentNota.Nota" min="0" max="10" step="0.1" />
                    </div>

                    <div class="mb-3">
                        <label for="fechaInput" class="form-label">Fecha:</label>
                        <input type="date" class="form-control" id="fechaInput" @bind="currentNota.Fecha" />
                    </div>

                    <div class="mb-3">
                        <label for="materiaSelect" class="form-label">Materia:</label>
                        <select class="form-select" id="materiaSelect" @bind="currentNota.DivsionCiclosMateriaAlumnosIdDivCicMatAlum">
                            <option value="0">Seleccione una materia</option>
                            @foreach (var materia in materias)
                            {
                                <option value="@materia.IdMateria">@materia.Nombre</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="tipoEvaluacionSelect" class="form-label">Tipo de Evaluación:</label>
                        <select class="form-select" id="tipoEvaluacionSelect" @bind="currentNota.TipoEvaluacionIdTipoEva">
                            <option value="0">Seleccione una evaluación</option>
                            @foreach (var evaluacion in tipoEvaluaciones)
                            {
                                <option value="@evaluacion.IdTipoEva">@evaluacion.NombreEva</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="@(isEdit ? EditNota : AddNota)">
                        @(isEdit ? "Guardar cambios" : "Agregar Nota")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Tabla de notas -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Alumno</th>
            <th>Materia</th>
            <th>Ciclo</th>
            <th>Nota</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (notasFiltradas != null && notasFiltradas.Any())
        {
            @foreach (var nota in notasFiltradas)
            {
                <tr>
                    <td>@nota.AlumnoNombre</td>
                    <td>@nota.Materia</td>
                    <td>@nota.Ciclo</td>
                    <td>@nota.Nota</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => OpenModalToEdit(nota)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => OpenConfirmDeleteModal(nota.IdNotas)">Eliminar</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">No se encontraron notas.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal de confirmación para eliminar -->
@if (isConfirmDeleteModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar esta nota?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteNota">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Botón para agregar nota -->
<button class="btn btn-primary" @onclick="OpenModalToAdd">Agregar Nota</button>

@code {
    private List<dynamic> notasFiltradas = new();
    private List<Materias> materias = new();
    private List<TipoEvaluacion> tipoEvaluaciones = new();
    private Notas currentNota = new();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private bool isConfirmDeleteModalOpen = false;
    private int idToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotas();
        await LoadMaterias();
        await LoadTipoEvaluaciones();
    }

    private async Task LoadNotas()
    {
        notasFiltradas = await Http.GetFromJsonAsync<List<dynamic>>("api/Notas/GetNotas");
    }

    private async Task LoadMaterias()
    {
        materias = await Http.GetFromJsonAsync<List<Materias>>("api/Materias");
    }

    private async Task LoadTipoEvaluaciones()
    {
        tipoEvaluaciones = await Http.GetFromJsonAsync<List<TipoEvaluacion>>("api/TipoNota");
    }

    private void OpenModalToAdd()
    {
        isModalOpen = true;
        isEdit = false;
        currentNota = new Notas();
    }

    private void OpenModalToEdit(dynamic nota)
    {
        isModalOpen = true;
        isEdit = true;
        currentNota = new Notas
        {
            IdNotas = nota.IdNotas,
            Nota = nota.Nota,
            Fecha = nota.Fecha,
            DivsionCiclosMateriaAlumnosIdDivCicMatAlum = nota.MateriasIdMateria,
            TipoEvaluacionIdTipoEva = nota.TipoEvaluacionIdTipoEva
        };
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void OpenConfirmDeleteModal(int id)
    {
        isConfirmDeleteModalOpen = true;
        idToDelete = id;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task AddNota()
    {
        await Http.PostAsJsonAsync("api/Notas", currentNota);
        CloseModal();
        await LoadNotas();
    }

    private async Task EditNota()
    {
        await Http.PutAsJsonAsync($"api/Notas/{currentNota.IdNotas}", currentNota);
        CloseModal();
        await LoadNotas();
    }

    private async Task DeleteNota()
    {
        await Http.DeleteAsync($"api/Notas/{idToDelete}");
        CloseConfirmDeleteModal();
        await LoadNotas();
    }
}









