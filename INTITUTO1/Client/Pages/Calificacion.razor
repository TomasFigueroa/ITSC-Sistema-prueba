@page "/notas"
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
<!-- Filtros -->
<div class="mb-3">
    <label class="form-label">Carrera</label>
    <InputSelect class="form-control" @bind-Value="idcarrera">
        <option value="">Seleccione una carrera</option>
        @foreach (var carrera in carreras)
        {
            <option value="@carrera.IdCarrera">@carrera.Nombre</option>
        }
    </InputSelect>
</div>
<div class="mb-3">
    <label class="form-label">Ciclo</label>
    <InputSelect class="form-control" @bind-Value="idciclo">
        <option value="">Seleccione Año lectivo</option>
        @foreach (var ciclo in divCiclo)
        {
            @foreach (var div in divisions)
            {
                if (div.CarrerassIdCarrera == idcarrera && ciclo.DivisionesIdDivision == div.IdDivision)
                {
                    <option value="@ciclo.IdDivCic">@GetNombreDivision(ciclo.DivisionesIdDivision, ciclo.CicloIdCiclo)</option>
                }
                
            }
            
        }
    </InputSelect>
</div>
<div class="mb-3">
    <label class="form-label">Materia</label>
    <InputSelect class="form-control" @bind-Value="iddivision">
        <option value="">Seleccione una division</option>
        @foreach (var divisiones in divisionCicloMaterias)
        {
            @foreach (var materia in materias)
            {
                if (idciclo == divisiones.DivisionCicloIdDivCic && idcarrera == materia.IdCarrera && materia.IdCarrera == idcarrera)
                {
                    <option value="@divisiones.IdDivCicMat">@materia.Nombre</option>
                }
                
            }
           

        }
    </InputSelect>
</div>
<div class="mb-3">
    <label class="form-label">Alumno</label>
    <InputSelect class="form-control" @bind-Value="idalumno">
        <option value="">Seleccione un Alumno</option>
      
            @foreach (var alumno in divisionCicloMateriaAlumnos)
            {
                if (iddivision == alumno.DivisionCicloMateriaIdDivCicMat)
                {
                    <option value="@alumno.AlumnosIdAlumno">@GetAlumnoNombre(alumno.AlumnosIdAlumno)</option>
                }

            }


        
    </InputSelect>
</div>

<!-- Botón para agregar nota -->
<button class="btn btn-primary" @onclick="OpenModalToAdd">Agregar Nota</button>
<button class="btn btn-warning" @onclick="OnInitializedAsync">
    <i class="fa fa-broom"></i> Limpiar
</button>

<!-- Tabla de notas -->
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr border-bottom: 2px solid #ddd;>
                    <th style="border-right: 2px solid #ddd;">Alumno</th>
                    <th style="border-right: 2px solid #ddd;">Tipo Evaluacion</th>
                    <th style="border-right: 2px solid #ddd;">Fecha</th>
                    <th style="border-right: 2px solid #ddd;">Nota</th>
                    <th style="border-right: 2px solid #ddd;">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (divisionCicloMateriaAlumnos != null && divisionCicloMateriaAlumnos.Any())
                {
                    @foreach (var alumno in divisionCicloMateriaAlumnos)
                    {
                        @foreach (var notasmod in Notas)
                        {
                            @if (alumno.IdDivCicMatAlum == notasmod.DivsionCiclosMateriaAlumnosIdDivCicMatAlum && alumno.DivisionCicloMateriaIdDivCicMat == iddivision &&
                            alumno.AlumnosIdAlumno == idalumno)
                            {
                                <tr>
                                    <td style="border-right: 2px solid #ddd;">@GetAlumnoNombre(alumno.AlumnosIdAlumno)</td>
                                    <td style="border-right: 2px solid #ddd;">@GetEvaluacionNombre(notasmod.TipoEvaluacionIdTipoEva)</td>
                                    <td style="border-right: 2px solid #ddd;">@notasmod.Fecha</td>
                                    <td style="border-right: 2px solid #ddd;">@notasmod.Nota</td>
                                    <td style="border-right: 2px solid #ddd;">
                                        <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(notasmod, notasmod.IdNotas)"><i class="oi oi-pencil"></i></button>
                                        <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(notasmod.IdNotas)"><i class="oi oi-trash"></i></button>
                                        <button class="btn btn-danger" @onclick="() => GenerateReport(notasmod.IdNotas)"><i>Reporte</i></button>
                                    </td>
                                </tr>
                            }

                        }

                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" style="text-align: center; padding: 20px;">
                            <div style="text-align: center;">
                                <!-- Logo del Instituto -->
                                <img src="Logo_IT.png" alt="Logo ITSC" style="max-width: 100px; margin-bottom: 20px; animation: fadeIn 1s ease-in-out;">
                                <!-- Mensaje elegante -->
                                <h5 style="color: #6c757d; font-style: italic;">No se encontraron notas.</h5>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (mostrarAlerta)
{

    <div class="alert alert-success d-flex align-items-center alert-right animated-alert" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check-circle-fill me-2" viewBox="0 0 16 16">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM6.97 11.03a.75.75 0 0 0 1.08.022L11.97 8a.75.75 0 1 0-1.08-1.04L7.5 10.21 5.646 8.354a.75.75 0 1 0-1.08 1.04l2 2z" />
        </svg>
        <div>
            Nota cargada correctamente.
        </div>
    </div>
}
@if(mostraError)
{
    <div class="alert alert-danger d-flex align-items-center alert-right animated-alert" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-x-circle-fill me-2" viewBox="0 0 16 16">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
        </svg>
        <div>
            No se cargó correctamente la nota.
        </div>
    </div>
    
}




<!-- Modal para agregar/editar notas -->
@if (isModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEdit) ? "Editar Nota" : "Agregar Nota")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="notaInput" class="form-label">Nota:</label>
                        <input type="number" class="form-control" id="notaInput" @bind="currentNota.Nota" min="1" max="10" />
                    </div>

                    <div class="mb-3">
                        <label for="fechaInput" class="form-label">Fecha:</label>
                        <input type="date" class="form-control" id="fechaInput" @bind="currentNota.Fecha" />
                    </div>

                    <div class="mb-3">
                        <label for="alumnoSelect" class="form-label">Alumno:</label>
                        <InputSelect class="form-select" id="alumnoSelect" @bind-Value="currentNota.Materias">
                            <option value="0">Seleccione un alumno</option>
                            @foreach (var alumno in divisionCicloMateriaAlumnos)
                            {
                                
                                    if(alumno.DivisionCicloMateriaIdDivCicMat == iddivision && idalumno== alumno.AlumnosIdAlumno)
                                    {
                                    <option value="@alumno.IdDivCicMatAlum">@GetAlumnoNombre(alumno.AlumnosIdAlumno)</option>
                                    }
                                    
                              
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label for="tipoEvaluacionSelect" class="form-label">Tipo de Evaluación:</label>
                        <InputSelect class="form-select" id="tipoEvaluacionSelect" @bind-Value="currentNota.TipoEvaluacionIdTipoEva">
                            <option value="0">Seleccione una evaluación</option>
                            @foreach (var evaluacion in tipoEvaluaciones)
                            {
                                <option value="@evaluacion.IdTipoEva">@evaluacion.NombreEva</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="@(isEdit ? EditNota : AddNota)">
                        @(isEdit ? "Guardar cambios" : "Agregar Nota")
                    </button>
                </div>
            </div>
        </div>
    </div>
}




<!-- Modal de confirmación para eliminar -->
@if (isConfirmDeleteModalOpen)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar esta nota?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteNota">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<DivsionCiclosMateriaAlumnos> divisionCicloMateriaAlumnos = new List<DivsionCiclosMateriaAlumnos>();
    private List<DivisionCicloMateria> divisionCicloMaterias = new List<DivisionCicloMateria>();
    private List<LIbros> libros = new List<LIbros>();
    private List<Ciclos> ciclo = new List<Ciclos>();
    private List<DivisionCiclo> divCiclo = new List<DivisionCiclo>();
    private List<Carrerass> carreras = new List<Carrerass>();
    private List<Divisiones> divisions = new List<Divisiones>();
    private List<Profesor> profesores = new List<Profesor>();
    private int idcarrera;
    private int idciclo;
    private int iddivision;
    private int idmateria;
    private int idalumno;
    private List<NotasDto> notasFiltradas = new();
    private List<Materias> materias = new();
    private List<DivsionCiclosMateriaAlumnos> alumnos = new();
    private List<Alumnos> alumno = new();
    private List<TipoEvaluacion> tipoEvaluaciones = new();
    private DTONotas currentNota = new();
    private List<Notas> Notas = new();
    private Notas Nota = new();
    private bool mostrarAlerta = false;
    private bool mostraError = false;
    private bool isModalOpen = false;
    private bool isEdit = false;
    private bool isConfirmDeleteModalOpen = false;
    private int idactual;
    private int idToDelete;
   
    protected override async Task OnInitializedAsync()
    {
        idcarrera = 0;
        iddivision = 0;
        idciclo = 0;
        idalumno = 0;
        idmateria = 0;
        await LoadNotas();
        await LoadMaterias();
        await LoadTipoEvaluaciones();
        await LoadAlumnos();
        await LoadAlumno();
        await LoadNotasMOD();
        await LoadDivCiclo();
        await LoadDivision();
        await LoadCarreras();
        await LoadCiclos();
        await LoadDivisionCicloMaterias();
        await LoadProfesores();
        await LoadDivisionCicloMateriaAlumnos();
        await LoadLibros();
    }

    private async Task LoadNotas()
    {
        notasFiltradas = await Http.GetFromJsonAsync<List<NotasDto>>("api/Notas/GetNotas");
    }
    private async Task LoadAlumnos()
    {
        alumnos = await Http.GetFromJsonAsync<List<DivsionCiclosMateriaAlumnos>>("api/DivisionCicloMateriaAlumnos");
        Console.WriteLine($"Número de alumnos cargados: {alumnos.Count}");
    }
    private async Task LoadAlumno()
    {
        alumno = await Http.GetFromJsonAsync<List<Alumnos>>("api/Alumnos");
        Console.WriteLine($"Número de alumnos cargados: {alumnos.Count}");
    }

    private async Task LoadMaterias()
    {
        materias = await Http.GetFromJsonAsync<List<Materias>>("api/Materias");
    }
    private async Task LoadNotasMOD()
    {
        Notas = await Http.GetFromJsonAsync<List<Notas>>("api/Notas/api/Notas");
    }

    private async Task LoadTipoEvaluaciones()
    {
        tipoEvaluaciones = await Http.GetFromJsonAsync<List<TipoEvaluacion>>("api/TipoNota");
    }
    private async Task LoadDivCiclo()
    {
        try
        {
            divCiclo = await Http.GetFromJsonAsync<List<DivisionCiclo>>("api/DivisionCiclo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading materias: {ex.Message}");
        }
    }
    private async Task LoadDivision()
    {
        try
        {
            divisions = await Http.GetFromJsonAsync<List<Divisiones>>("api/Division");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading materias: {ex.Message}");
        }
    }

    private async Task LoadCarreras()
    {
        try
        {
            carreras = await Http.GetFromJsonAsync<List<Carrerass>>("api/Carrera");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading carreras: {ex.Message}");
        }
    }
    private async Task LoadCiclos()
    {
        try
        {
            ciclo = await Http.GetFromJsonAsync<List<Ciclos>>("api/Ciclo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ciclos: {ex.Message}");
        }
    }
    private async Task LoadDivisionCicloMaterias()
    {
        try
        {
            divisionCicloMaterias = await Http.GetFromJsonAsync<List<DivisionCicloMateria>>("api/DivisionCicloMateria");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading DivisionCicloMaterias: {ex.Message}");
        }
    }
    private async Task LoadProfesores()
    {
        try
        {
            profesores = await Http.GetFromJsonAsync<List<Profesor>>("api/Profesor");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Profesores: {ex.Message}");
        }
    }
    private async Task LoadDivisionCicloMateriaAlumnos()
    {
        try
        {
            divisionCicloMateriaAlumnos = await Http.GetFromJsonAsync<List<DivsionCiclosMateriaAlumnos>>("api/DivisionCicloMateriaAlumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading DivisionCicloMateriaAlumnos: {ex.Message}");
        }
    }
    private async Task LoadLibros()
    {
        try
        {
            libros = await Http.GetFromJsonAsync<List<LIbros>>("api/Libros");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Libros: {ex.Message}");
        }
    }
    private string GetAlumnoNombre(int idAlumno)
    {
        var alumn = alumno.FirstOrDefault(m => m.IdAlumno == idAlumno);
        if (alumn == null)
            return "N/A";

        return $"{alumn.DNI_Alum.ToString()}-{alumn.Apellido}-{alumn.Nombre.ToString()}";
    }
    private string GetEvaluacionNombre(int idEva)
    {
        var eva = tipoEvaluaciones.FirstOrDefault(m => m.IdTipoEva == idEva);
        if (eva == null)
            return "N/A";

        return $"{eva.NombreEva.ToString()}";
    }
    private string GetNombreDivision(int idDivision, int idCiclo)
    {
        var div = divisions.FirstOrDefault(m => m.IdDivision == idDivision);
        if (div == null)
            return "N/A";
        var Cic = ciclo.FirstOrDefault(m => m.IdCiclo == idCiclo);
        if (Cic == null)
            return "N/A";

        return $"{div.NombreDiv}-{Cic.Fecha.ToString()}";
    }
    private void MostrarError()
    {
        mostraError = true;

        // Crear un temporizador para ocultar la alerta después de 5 segundos
        var timer = new System.Timers.Timer(5000); // 5000 ms = 5 segundos
        timer.Elapsed += (sender, e) =>
        {
            mostraError = false;
            InvokeAsync(StateHasChanged); // Asegurar que el UI se actualice
            timer.Dispose(); // Liberar el temporizador
        };
        timer.Start();
    }
    private void MostrarAlerta()
    {
        mostrarAlerta = true;

        // Crear un temporizador para ocultar la alerta después de 5 segundos
        var timer = new System.Timers.Timer(5000); // 5000 ms = 5 segundos
        timer.Elapsed += (sender, e) =>
        {
            mostrarAlerta = false;
            InvokeAsync(StateHasChanged); // Asegurar que el UI se actualice
            timer.Dispose(); // Liberar el temporizador
        };
        timer.Start();
    }

    private void OpenModalToAdd()
    {
        LoadNotas();
        LoadMaterias();
        LoadTipoEvaluaciones();
        LoadAlumnos();

        isModalOpen = true;
        isEdit = false;
        currentNota = new DTONotas();
    }

    private void OpenModalToEdit(Notas nota, int id)
    {
        LoadNotasMOD();
        isModalOpen = true;
        isEdit = true;
        idactual = id;
        currentNota = new DTONotas
            {
                Nota = nota.Nota,
                Fecha = nota.Fecha,
                Materias = nota.DivsionCiclosMateriaAlumnosIdDivCicMatAlum,
                TipoEvaluacionIdTipoEva = nota.TipoEvaluacionIdTipoEva
            };
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void OpenConfirmDeleteModal(int id)
    {
        isConfirmDeleteModalOpen = true;
        idToDelete = id;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task AddNota()
    {
        // Lógica para realizar el POST de los datos actuales del formulario al servidor

        try
        {
            var response = await Http.PostAsJsonAsync("api/Notas", currentNota);

            if (response.IsSuccessStatusCode)
            {
                // Si el POST es exitoso, cierra el modal y actualiza la lista de notas
                CloseModal();
                MostrarAlerta();
                await LoadDivisionCicloMateriaAlumnos();
                await LoadAlumnos();
                await LoadAlumno();
                await LoadNotasMOD();
            }
            else
            {
                // Si falla, mostrar algún error al usuario
                MostrarError();
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Error al agregar la nota: " + error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding divisionCicloMateria: {ex.Message}");
        }
    }

    private async Task EditNota()
    {
        await Http.PutAsJsonAsync($"api/Notas/{idactual}", currentNota);
        CloseModal();
        await LoadNotas();
        await LoadDivisionCicloMateriaAlumnos();
        await LoadAlumnos();
        await LoadAlumno();
        await LoadNotasMOD();
    }

    private async Task DeleteNota()
    {
        await Http.DeleteAsync($"api/Notas/{idToDelete}");
        CloseConfirmDeleteModal();
        await LoadNotas();
        await LoadDivisionCicloMateriaAlumnos();
        await LoadAlumnos();
        await LoadAlumno();
        await LoadNotasMOD();
    }
    private async Task GenerateReport(int alumnoId)
    {
        // Realiza una solicitud GET al servidor para generar y descargar el reporte
        var response = await Http.GetAsync($"api/Notas/GenerarReporte?alumnoId={alumnoId}");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsByteArrayAsync();
            var fileName = "Certificado_Materias_Aprobadas.pdf";

            // Descarga el archivo en el navegador
            var mimeType = "application/pdf";
            await JS.InvokeVoidAsync("BlazorDownloadFile", fileName, mimeType, content);
        }
        else
        {
            Console.WriteLine("Error al generar el reporte.");
        }
    }


}
