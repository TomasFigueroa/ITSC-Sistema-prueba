@page "/Notas"
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@inject HttpClient Http

<PageTitle>Notas</PageTitle>

<button class="btn btn-success" @onclick="OpenModalToAdd">Agregar Nota</button>

<!-- Filtros -->
<div class="mb-3">
    <label class="form-label">Filtrar por Alumno (DNI)</label>
    <input type="text" class="form-control" @bind="filtroDNI" placeholder="DNI del Alumno" />
</div>
<select class="form-control" @bind="FiltroMateriaId">
    <option value="">Seleccione una materia</option>
    @foreach (var materia in materias)
    {
        <option value="@materia.IdMateria">@materia.Nombre</option>
    }
</select>

<!-- Tabla de Notas -->
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr style="border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd;">Alumno</th>
                    <th style="border-right: 2px solid #ddd;">Nota</th>
                    <th style="border-right: 2px solid #ddd;">Fecha</th>
                    <th style="border-right: 2px solid #ddd;">Tipo Evaluación</th>
                    <th style="border-right: 2px solid #ddd;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var nota in notasFiltradas)
                {
                    <tr>
                        <td style="border-right: 2px solid #ddd;">@GetNombreAlumno(nota.DivsionCiclosMateriaAlumnosIdDivCicMatAlum)</td>
                        <td style="border-right: 2px solid #ddd;">@nota.Nota</td>
                        <td style="border-right: 2px solid #ddd;">@nota.Fecha.ToShortDateString()</td>
                        <td style="border-right: 2px solid #ddd;">@GetNombreEvaluacion(nota.TipoEvaluacionIdTipoEva)</td>
                        <td>
                            <div class="action-buttons m-1">
                                <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(nota)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(nota.IdNotas)"><i class="oi oi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal para agregar y editar notas -->
@if (isModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Editar Nota" : "Agregar Nota")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentNota" OnValidSubmit="@(isEdit ? EditNota : AddNota)">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Materia</label>
                            <select class="form-control" @bind="selectedMateriaId" @oninput="FiltrarAlumnosPorMateria">
                                <option value="">Seleccione una materia</option>
                                @foreach (var materia in materias)
                                {
                                    <option value="@materia.IdMateria">@materia.Nombre</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Alumno</label>
                            <select class="form-control" @bind="currentNota.DivsionCiclosMateriaAlumnosIdDivCicMatAlum">
                                <option value="">Seleccione un alumno</option>
                                @foreach (var alumno in alumnosFiltrados)
                                {
                                    <option value="@alumno.IdAlumno">@alumno.DNI_Alum - @alumno.Nombre</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Nota</label>
                            <InputNumber class="form-control" @bind-Value="currentNota.Nota" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha</label>
                            <InputDate class="form-control" @bind-Value="currentNota.Fecha" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Tipo de Evaluación</label>
                            <select class="form-control" @bind="currentNota.TipoEvaluacionIdTipoEva">
                                <option value="">Seleccione un tipo de evaluación</option>
                                @foreach (var evaluacion in tipoEvaluaciones)
                                {
                                    <option value="@evaluacion.IdTipoEva">@evaluacion.NombreEva</option>
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEdit) ? "Guardar Cambios" : "Agregar Nota")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para confirmar eliminación -->
@if (isConfirmDeleteModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar esta nota?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteNota">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Notas> notas = new();
    private List<Alumnos> alumnos = new();
    private List<Alumnos> alumnosFiltrados = new();
    private List<Materias> materias = new();
    private List<TipoEvaluacion> tipoEvaluaciones = new();
    private List<DivsionCiclosMateriaAlumnos> DivsionCiclosMateriaAlumnos = new();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private Notas currentNota = new();
    private bool isConfirmDeleteModalOpen = false;
    private int idToDelete;
    private Context _context;
    // Filtros
    private string filtroDNI = string.Empty;
    private int _filtroMateriaId;
    private int notaFiltro = 0; // Filtro para nota
    private List<Notas> notasFiltradas = new();
    private int selectedMateriaId;

    private int FiltroMateriaId
    {
        get => _filtroMateriaId;
        set
        {
            if (_filtroMateriaId != value)
            {
                _filtroMateriaId = value;
                FiltrarAlumnos();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadNotas();
        await LoadAlumnos();
        await LoadMaterias();
        await LoadTipoEvaluaciones();
        await LoadDivisionCicloMateriaAlumno();
        FiltrarAlumnos();
    }

    private async Task LoadNotas()
    {
        try
        {
            notas = await Http.GetFromJsonAsync<List<Notas>>("api/Notas");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notas: {ex.Message}");
        }
    }
    private async Task LoadDivisionCicloMateriaAlumno()
    {
        try
        {
            DivsionCiclosMateriaAlumnos = await Http.GetFromJsonAsync<List<DivsionCiclosMateriaAlumnos>>("api/DivisionCicloMateriaAlumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notas: {ex.Message}");
        }
    }
    private async Task LoadAlumnos()
    {
        try
        {
            alumnos = await Http.GetFromJsonAsync<List<Alumnos>>("api/Alumnos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading alumnos: {ex.Message}");
        }
    }

    private async Task LoadMaterias()
    {
        try
        {
            materias = await Http.GetFromJsonAsync<List<Materias>>("api/Materias");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading materias: {ex.Message}");
        }
    }

    private async Task LoadTipoEvaluaciones()
    {
        try
        {
            tipoEvaluaciones = await Http.GetFromJsonAsync<List<TipoEvaluacion>>("api/TipoNota");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tipoEvaluaciones: {ex.Message}");
        }
    }

    private void FiltrarAlumnos()
    {
        alumnosFiltrados = alumnos
            .Where(a =>
                (string.IsNullOrWhiteSpace(filtroDNI) || a.DNI_Alum.ToString().Contains(filtroDNI)) &&
                (_filtroMateriaId == 0 || a.DivsionCiclosMateriaAlumnos.Any(d => d.AlumnosIdAlumno == _filtroMateriaId)))
            .ToList();

        FiltrarNotas();
    }

    private async Task FiltrarAlumnosPorMateria(ChangeEventArgs e)
    {
        if (!int.TryParse(e.Value?.ToString(), out int materiaId))
        {
            selectedMateriaId = 0;
            alumnosFiltrados.Clear();
            return;
        }

        selectedMateriaId = materiaId;

        alumnosFiltrados = await ObtenerAlumnosPorMateria(selectedMateriaId);
        if (alumnosFiltrados == null || !alumnosFiltrados.Any())
        {
            alumnosFiltrados.Clear();
            return;
        }

        FiltrarNotas();
    }

    private async Task<List<Alumnos>> ObtenerAlumnosPorMateria(int materiaId)
    {
        // Aquí deberías implementar la lógica para obtener los alumnos relacionados con la materia específica.
        // Esto dependerá de cómo tengas estructurada la relación en tu base de datos.
        return await Task.FromResult(alumnos.Where(a => a.DivsionCiclosMateriaAlumnos.Any(d => d.DivisionCicloMateriaIdDivCicMat == materiaId)).ToList());
    }
    private void FiltrarNotas()
    {
        if (notas == null || !notas.Any())
        {
            notasFiltradas.Clear();
            return;
        }

        notasFiltradas = notas
            .Where(n =>
            {
                var nombreAlumno = GetNombreAlumno(n.DivsionCiclosMateriaAlumnosIdDivCicMatAlum);

                bool filtroDNIValido = string.IsNullOrWhiteSpace(filtroDNI) || nombreAlumno.Contains(filtroDNI);
                bool filtroMateriaValido = selectedMateriaId == 0 || n.DivsionCiclosMateriaAlumnosIdDivCicMatAlum == selectedMateriaId;

                return filtroDNIValido && filtroMateriaValido;
            })
            .ToList();

        if (!notasFiltradas.Any())
        {
            notasFiltradas.Clear();
        }
    }


    private void OpenModalToAdd()
    {
        currentNota = new Notas();
        isEdit = false;
        isModalOpen = true;
    }

    private void OpenModalToEdit(Notas nota)
    {
        currentNota = nota;
        isEdit = true;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void OpenConfirmDeleteModal(int id)
    {
        idToDelete = id;
        isConfirmDeleteModalOpen = true;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task AddNota()
    {
        try
        {
            await Http.PostAsJsonAsync("api/Notas", currentNota);
            await LoadNotas();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding nota: {ex.Message}");
        }
    }

    private async Task EditNota()
    {
        try
        {
            await Http.PutAsJsonAsync($"api/Notas/{currentNota.IdNotas}", currentNota);
            await LoadNotas();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing nota: {ex.Message}");
        }
    }

    private async Task DeleteNota()
    {
        try
        {
            await Http.DeleteAsync($"api/Notas/{idToDelete}");
            await LoadNotas();
            CloseConfirmDeleteModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting nota: {ex.Message}");
        }
    }

    private string GetNombreAlumno(int idDivCicMatAlum)
    {
        var divCicloMatAlumno = DivsionCiclosMateriaAlumnos.FirstOrDefault(d => d.IdDivCicMatAlum == idDivCicMatAlum);
        if (divCicloMatAlumno == null)
            return "N/A";

        var alumno = alumnos.FirstOrDefault(a => a.IdAlumno == divCicloMatAlumno.AlumnosIdAlumno);
        if (alumno == null)
            return "N/A";

        var nombre = string.IsNullOrWhiteSpace(alumno.Nombre) ? "Nombre no disponible" : alumno.Nombre;
        var apellido = string.IsNullOrWhiteSpace(alumno.Apellido) ? "Apellido no disponible" : alumno.Apellido;

        return $"{nombre} {apellido}";
    }



    private string GetNombreEvaluacion(int evaluacionId)
    {
        var evaluacion = tipoEvaluaciones.FirstOrDefault(e => e.IdTipoEva == evaluacionId);
        return evaluacion != null ? evaluacion.NombreEva : "Desconocido";
    }
}





