@page "/Carrera"
@attribute [Authorize]

@inject HttpClient Http



<PageTitle>Carrera</PageTitle>

<!-- ordenar por a-z o z-a -->

<button class="btn btn-outline-dark" @onclick="SortByNombre">
   Ordenar alfabeticamente (Nombre)
    @if (sortOrder == "asc")
    {
        <i class="oi oi-arrow-thick-top"></i>
    }
    else
    {
        <i class="oi oi-arrow-thick-bottom"></i>
    }
</button>


<button class="btn btn-success" @onclick="OpenModalToAdd">Cargar Carrera</button>
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr style="border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd;">Nombre</th>
                    <th style="border-right: 2px solid #ddd;">Fecha Inicio</th>
                    <th style="border-right: 2px solid #ddd;">Fecha Fin</th>
                    <th style="border-right: 2px solid #ddd;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @if(carreras!=null && carreras.Any()){
                    @foreach (var carrera in carreras)
                    {
                        <tr>
                            <td style="border-right: 2px solid #ddd;">@carrera.Nombre</td>
                            <td style="border-right: 2px solid #ddd;">@carrera.FechaInicio.ToShortDateString()</td>
                            <td style="border-right: 2px solid #ddd;">@carrera.FechaFin.ToShortDateString()</td>
                            <td>
                                <div class="action-buttons m-1">
                                    <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(carrera, carrera.IdCarrera)"><i class="oi oi-pencil"></i></button>
                                    <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(carrera, carrera.IdCarrera)"><i class="oi oi-trash"></i></button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" style="text-align: center; padding: 20px;">
                            <div style="text-align: center;">
                                <!-- Logo del Instituto -->
                                <img src="Logo_IT.png" alt="Logo ITSC" style="max-width: 100px; margin-bottom: 20px; animation: fadeIn 1s ease-in-out;">
                                <!-- Mensaje elegante -->
                                <h5 style="color: #6c757d; font-style: italic;">No se encontraron Carreras.</h5>
                            </div>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
</div>

<!-- Modal para agregar y editar carreras -->
@if (isModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Editar Carrera" : "Agregar Carrera")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentCarrera" OnValidSubmit="@(isEdit ? EditCarrera : AddCarrera)">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" @bind-Value="currentCarrera.Nombres" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha Inicio</label>
                            <InputDate class="form-control" @bind-Value="currentCarrera.Fecha_inicio" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha Fin</label>
                            <InputDate class="form-control" @bind-Value="currentCarrera.Fecha_fin" />
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEdit) ? "Guardar Cambios" : "Agregar Carrera")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para confirmar eliminación -->
@if (isConfirmDeleteModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar esta carrera?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteCarrera">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    int idcarreralocal;
    Carrerass Carreras = new Carrerass();
    List<Carrerass> carreras = new List<Carrerass>();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private DTOSCarreras currentCarrera = new DTOSCarreras();
    private Carrerass carreraToDelete;
    private bool isConfirmDeleteModalOpen = false;
    private string sortOrder = "asc";

    protected override async Task OnInitializedAsync()
    {
        await LoadCarreras();
    }

    private async Task LoadCarreras()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Carrerass>>("api/Carrera");
            if (sortOrder == "asc")
            {
                carreras = response.OrderBy(c => c.Nombre).ToList();
            }
            else
            {
                carreras = response.OrderByDescending(c => c.Nombre).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading carreras: {ex.Message}");
        }
    }

    private void OpenModalToAdd()
    {
        currentCarrera = new DTOSCarreras();
        isEdit = false;
        isModalOpen = true;
    }

    private void OpenModalToEdit(Carrerass carrera,int id)
    {
        currentCarrera = new DTOSCarreras
            {

                Nombres = carrera.Nombre,
                Fecha_inicio = carrera.FechaInicio,
                Fecha_fin = carrera.FechaFin
            };
        idcarreralocal = id;
        isEdit = true;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private async Task AddCarrera()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Carrera", currentCarrera);
            if (response.IsSuccessStatusCode)
            {
                await LoadCarreras();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error adding carrera: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding carrera: {ex.Message}");
        }
    }

    private async Task EditCarrera()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Carrera/{idcarreralocal}", currentCarrera);
            if (response.IsSuccessStatusCode)
            {
                await LoadCarreras();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error editing carrera: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception editing carrera: {ex.Message}");
        }
    }

    private void OpenConfirmDeleteModal(Carrerass carrera, int id)
    {
        idcarreralocal = id;
        carreraToDelete = carrera;
        isConfirmDeleteModalOpen = true;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task DeleteCarrera()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Carrera/{idcarreralocal}");
            if (response.IsSuccessStatusCode)
            {
                await LoadCarreras();
                CloseConfirmDeleteModal();
            }
            else
            {
                Console.WriteLine($"Error deleting carrera: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting carrera: {ex.Message}");
        }
    }
    
    //ordenar por nombre
    private void SortByNombre()
    {
        if (sortOrder == "asc")
        {
            sortOrder = "desc";
        }
        else
        {
            sortOrder = "asc";
        }
        LoadCarreras();
    }
   
}




