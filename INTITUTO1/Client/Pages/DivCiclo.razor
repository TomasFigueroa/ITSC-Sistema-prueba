@page "/DivisionCiclo"
@using Microsoft.EntityFrameworkCore

@inject HttpClient Http

<PageTitle>DivisionCiclo</PageTitle>
<button class="btn btn-success" @onclick="OpenModalToAdd">Cargar DivisionCiclo</button>
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr style="border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd;">Ciclo</th>
                    <th style="border-right: 2px solid #ddd;">División</th>
                    <th style="border-right: 2px solid #ddd;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var divisionCiclo in divisionCiclos)
                {
                    <tr>
                        <td style="border-right: 2px solid #ddd;">@GetCicloNombre(divisionCiclo.CicloIdCiclo)</td>
                        <td style="border-right: 2px solid #ddd;">@GetDivisionNombre(divisionCiclo.DivisionesIdDivision)</td>
                        <td>
                            <div class="action-buttons m-1">
                                <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(divisionCiclo, divisionCiclo.IdDivCic)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(divisionCiclo.IdDivCic)"><i class="oi oi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (isModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Editar DivisionCiclo" : "Agregar DivisionCiclo")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentDivisionCiclo" OnValidSubmit="@(isEdit ? EditDivisionCiclo : AddDivisionCiclo)">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Ciclo</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCiclo.CicloIdCiclo">
                                @foreach (var ciclo in ciclos)
                                {
                                    <option value="@ciclo.IdCiclo">@ciclo.Fecha</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">División</label>
                            <InputSelect class="form-control" @bind-Value="currentDivisionCiclo.DivisionesIdDivision">
                                @foreach (var division in divisiones)
                                {
                                    <option value="@division.IdDivision">@division.NombreDiv</option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEdit) ? "Guardar Cambios" : "Agregar DivisionCiclo")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (isConfirmDeleteModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar esta DivisionCiclo?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteDivisionCiclo">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DivisionCiclo> divisionCiclos = new List<DivisionCiclo>();
    private List<Ciclos> ciclos = new List<Ciclos>();
    private List<Divisiones> divisiones = new List<Divisiones>();
    private DTODivisionCiclo currentDivisionCiclo = new DTODivisionCiclo();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private int idDivisionCicloToDelete;
    private bool isConfirmDeleteModalOpen = false;
    int idactual;

    protected override async Task OnInitializedAsync()
    {
        await LoadDivisionCiclos();
        await LoadCiclos();
        await LoadDivisiones();
    }

    private async Task LoadDivisionCiclos()
    {
        try
        {
            divisionCiclos = await Http.GetFromJsonAsync<List<DivisionCiclo>>("api/DivisionCiclo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading divisionCiclos: {ex.Message}");
        }
    }

    private async Task LoadCiclos()
    {
        try
        {
            ciclos = await Http.GetFromJsonAsync<List<Ciclos>>("api/Ciclo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ciclos: {ex.Message}");
        }
    }

    private async Task LoadDivisiones()
    {
        try
        {
            divisiones = await Http.GetFromJsonAsync<List<Divisiones>>("api/Division");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading divisiones: {ex.Message}");
        }
    }

    private string GetCicloNombre(int idCiclo)
    {
        var ciclo = ciclos.FirstOrDefault(c => c.IdCiclo == idCiclo);
        return ciclo?.Fecha.ToString() ?? "Ciclo no encontrado";
    }

    private string GetDivisionNombre(int idDivision)
    {
        var division = divisiones.FirstOrDefault(d => d.IdDivision == idDivision);
        return division?.NombreDiv ?? "División no encontrada";
    }

    private void OpenModalToAdd()
    {
        currentDivisionCiclo = new DTODivisionCiclo();
        isEdit = false;
        isModalOpen = true;
    }

    private void OpenModalToEdit(DivisionCiclo divisionCiclo, int id)
    {
        currentDivisionCiclo = new DTODivisionCiclo
            {
                CicloIdCiclo = divisionCiclo.CicloIdCiclo,
                DivisionesIdDivision = divisionCiclo.DivisionesIdDivision
            };
        idactual = id;
        isEdit = true;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private async Task AddDivisionCiclo()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/DivisionCiclo", currentDivisionCiclo);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCiclos();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error adding divisionCiclo: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding divisionCiclo: {ex.Message}");
        }
    }

    private async Task EditDivisionCiclo()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/DivisionCiclo/{idactual}", currentDivisionCiclo);
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCiclos();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error editing divisionCiclo: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception editing divisionCiclo: {ex.Message}");
        }
    }

    private void OpenConfirmDeleteModal(int id)
    {
        idactual = id;
        isConfirmDeleteModalOpen = true;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task DeleteDivisionCiclo()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/DivisionCiclo/{idactual}");
            if (response.IsSuccessStatusCode)
            {
                await LoadDivisionCiclos();
                CloseConfirmDeleteModal();
            }
            else
            {
                Console.WriteLine($"Error deleting divisionCiclo: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting divisionCiclo: {ex.Message}");
        }
    }
}

