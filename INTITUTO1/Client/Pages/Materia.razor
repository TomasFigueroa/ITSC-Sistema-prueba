@page "/Materias"
@using Microsoft.EntityFrameworkCore

@inject HttpClient Http

<PageTitle>Materias</PageTitle>
<button class="btn btn-success" @onclick="OpenModalToAdd">Cargar Materia</button>
<!-- Filtros -->
<div class="mb-3">
    <label class="form-label">Filtrar por Nombre de Materia</label>
    <input type="text" class="form-control" @bind="filtroNombre" @oninput="FiltrarMaterias" placeholder="Nombre de Materia" />
</div>
<div class="mb-3">
    <label class="form-label">Filtrar por Carrera</label>
    <input type="text" class="form-control" @bind="filtroCarrera" @oninput="FiltrarMaterias" placeholder="Carrera" />
</div>
<div class="table-container" style="overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
    <div style="border-top-left-radius: 12px; border-top-right-radius: 12px; background-color: #f2f2f2; padding: 10px;">
        <table class="table" style="border-collapse: collapse; width: 100%; border: 2px solid #E6E6FA;">
            <thead>
                <tr style="border-bottom: 2px solid #ddd;">
                    <th style="border-right: 2px solid #ddd;">Nombre</th>
                    <th style="border-right: 2px solid #ddd;">Carrera</th>
                    <th style="border-right: 2px solid #ddd;">Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var materia in materiasFiltradas)
                {
                    <tr>
                        <td style="border-right: 2px solid #ddd;">@materia.Nombre</td>
                        <td style="border-right: 2px solid #ddd;">@GetNombreCarrera(materia.IdCarrera)</td>
                        <td>
                            <div class="action-buttons m-1">
                                <button class="btn btn-primary me-2" @onclick="() => OpenModalToEdit(materia, materia.IdMateria)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => OpenConfirmDeleteModal(materia.IdMateria)"><i class="oi oi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal para agregar y editar materias -->
@if (isModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Editar Materia" : "Agregar Materia")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentMateria" OnValidSubmit="@(isEdit ? EditMateria : AddMateria)">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" @bind-Value="currentMateria.Nombre" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Carrera</label>
                            <InputSelect class="form-control" @bind-Value="currentMateria.IdCarrera">
                                <option value="">Seleccione una carrera</option>
                                @foreach (var carrera in carreras)
                                {
                                    <option value="@carrera.IdCarrera">@carrera.Nombre</option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">@((isEdit) ? "Guardar Cambios" : "Agregar Materia")</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para confirmar eliminación -->
@if (isConfirmDeleteModalOpen)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmDeleteModal"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar esta materia?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteMateria">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Materias> materias = new List<Materias>();
    private List<Carrerass> carreras = new List<Carrerass>();
    private bool isModalOpen = false;
    private bool isEdit = false;
    private DTOMaterias currentMateria = new DTOMaterias();
    private bool isConfirmDeleteModalOpen = false;
    private int idToDelete;

    // Filtros
    private string filtroNombre = string.Empty;
    private string filtroCarrera = string.Empty;
    private List<Materias> materiasFiltradas = new List<Materias>();

    protected override async Task OnInitializedAsync()
    {
        await LoadMaterias();
        await LoadCarreras();
        await FiltrarMaterias();
    }

    private async Task LoadMaterias()
    {
        try
        {
            materias = await Http.GetFromJsonAsync<List<Materias>>("api/Materias");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading materias: {ex.Message}");
        }
    }

    private async Task LoadCarreras()
    {
        try
        {
            carreras = await Http.GetFromJsonAsync<List<Carrerass>>("api/Carrera");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading carreras: {ex.Message}");
        }
    }

    private async Task FiltrarMaterias()
    {
        materiasFiltradas = materias.Where(m =>
            (string.IsNullOrEmpty(filtroNombre) || m.Nombre.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filtroCarrera) || GetNombreCarrera(m.IdCarrera).Contains(filtroCarrera, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    private string GetNombreCarrera(int idCarrera)
    {
        var carrera = carreras.FirstOrDefault(c => c.IdCarrera == idCarrera);
        return carrera?.Nombre ?? "Carrera no encontrada";
    }

    private void OpenModalToAdd()
    {
        currentMateria = new DTOMaterias();
        isEdit = false;
        isModalOpen = true;
    }

    private void OpenModalToEdit(Materias materia, int id)
    {
        currentMateria = new DTOMaterias
            {
                Nombre = materia.Nombre,
                IdCarrera = materia.IdCarrera
            };
        idToDelete = id;
        isEdit = true;
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private async Task AddMateria()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Materias", currentMateria);
            if (response.IsSuccessStatusCode)
            {
                await LoadMaterias();
                await LoadCarreras();
                await FiltrarMaterias();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error adding materia: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception adding materia: {ex.Message}");
        }
    }

    private async Task EditMateria()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Materias/{idToDelete}", currentMateria);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadMaterias();
                await LoadCarreras();
                await FiltrarMaterias();
                CloseModal();
            }
            else
            {
                Console.WriteLine($"Error editing materia: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception editing materia: {ex.Message}");
        }
    }

    private void OpenConfirmDeleteModal(int id)
    {
        idToDelete = id;
        isConfirmDeleteModalOpen = true;
    }

    private void CloseConfirmDeleteModal()
    {
        isConfirmDeleteModalOpen = false;
    }

    private async Task DeleteMateria()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Materias/{idToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadMaterias();
                CloseConfirmDeleteModal();
            }
            else
            {
                Console.WriteLine($"Error deleting materia: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception deleting materia: {ex.Message}");
        }
    }
}




